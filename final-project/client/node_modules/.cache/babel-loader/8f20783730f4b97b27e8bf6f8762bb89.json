{"ast":null,"code":"var _jsxFileName = \"/Users/poker/Desktop/Job-Tracking-Web-Application/final-project/client/src/components/Education/Charts.js\";\nimport React, { Component } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport axios from 'axios';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport CanvasJSReact from '../../assets/canvasjs.react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport { MDBContainer } from 'mdbreact'; //disableScroll.on(); \n\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nHighcharts.setOptions({\n  colors: [\"#365253\", \"#618685\", \"#5e9a78\", \"#85a47f\", \"#a7ce9f\"]\n});\n\nclass Charts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      levelData: [],\n      gradData: [],\n      degreeData: [],\n      barChart: {},\n      columnChart: {},\n      combinationChart: {}\n    };\n  }\n\n  componentDidMount() {\n    axios.get('/dashboard/education').then(res => {\n      document.body.style.overflow = 'hidden';\n      let data = res.data;\n      this.setState({\n        levelData: data.level\n      });\n      this.setState({\n        gradData: data.grad\n      });\n      this.setState({\n        degreeData: data.degree\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  renderBarChart() {\n    this.state.barChart = {\n      chart: {\n        type: 'bar'\n      },\n      title: {\n        text: \"Percentage of Adults by Educational Attainment in 2018\",\n        style: {\n          color: \"#365253\",\n          fontFamily: \"Verdana\",\n          fontColor: \"#365253\",\n          fontWeight: 'bold',\n          fontSize: 23\n        }\n      },\n      accessibility: {\n        announceNewData: {\n          enabled: true\n        },\n        point: {\n          valueSuffix: '%'\n        }\n      },\n      xAxis: {\n        visible: false\n      },\n      yAxis: {\n        labels: {\n          formatter: function () {\n            return this.value + \"%\";\n          },\n          style: {\n            fontSize: '15px'\n          }\n        },\n        title: {\n          enabled: false\n        } // title:{\n        //     text:\"Percentage\",\n        //     style:{\n        //             fontSize:17,\n        //             color:\"#000000\",\n        //             fontFamily: \"Verdana\"\n        //         },\n        //},\n        //visible:true,\n        //max:30\n\n      },\n      legend: {\n        itemStyle: {\n          color: '#525252',\n          //fontWeight: 'bold',\n          fontSize: 13\n        }\n      },\n      plotOptions: {\n        series: {\n          pointWidth: 30,\n          dataLabels: {\n            enabled: true,\n            format: '{point.name}: {point.y:.1f}%'\n          }\n        }\n      },\n      tooltip: {\n        headerFormat: '<span style=\"font-size:11px\">{series.name}</span><br>',\n        pointFormat: '<span style=\"color:{point.color}\">{point.name}</span>: <b>{point.y:.2f}%</b> of total<br/>'\n      },\n      series: []\n    };\n\n    for (var i = 0; i < 5; i++) {\n      this.state.barChart.series.push({\n        name: '',\n        data: []\n      });\n    }\n\n    Object.keys(this.state.levelData).map((i, index) => {\n      let level = this.state.levelData[i].level;\n      let percentage = this.state.levelData[i].percentage;\n\n      switch (level) {\n        case 'Bachelors Degree':\n          this.state.barChart.series[0].name = level;\n          this.state.barChart.series[0].data.push(percentage);\n          break;\n\n        case 'Graduate Degree':\n          this.state.barChart.series[1].name = level;\n          this.state.barChart.series[1].data.push(percentage);\n          break;\n\n        case 'College/Associate Degree':\n          this.state.barChart.series[2].name = level;\n          this.state.barChart.series[2].data.push(percentage);\n          break;\n\n        case 'High School':\n          this.state.barChart.series[3].name = level;\n          this.state.barChart.series[3].data.push(percentage);\n          break;\n\n        case 'Less Than HighSchool':\n          this.state.barChart.series[4].name = level;\n          this.state.barChart.series[4].data.push(percentage);\n          break;\n      }\n    });\n  }\n\n  renderColumnChart() {\n    //var colors = ['#3B97B2', '#67BC42', '#FF56DE', '#E6D605', '#BC36FE', '#000'];\n    this.state.columnChart = {\n      chart: {\n        type: 'column'\n      },\n      title: {\n        text: \"Rate of Graduation, Share of Graduates Who Meet UC/CSU Requirements, and Dropout Rate\",\n        style: {\n          color: \"#365253\",\n          fontFamily: \"Verdana\",\n          fontColor: \"#365253\",\n          fontWeight: 'bold',\n          fontSize: 23\n        }\n      },\n      //dataPointWidth: 50,\n      xAxis: {\n        labels: {\n          align: 'right',\n          style: {\n            fontSize: '15px'\n          }\n        },\n        categories: ['2013', '2016', '2019'],\n        crosshair: true\n      },\n      yAxis: {\n        opposite: false,\n        labels: {\n          formatter: function () {\n            return this.value + \"%\";\n          },\n          style: {\n            fontSize: '15px'\n          }\n        },\n        min: 0,\n        title: {\n          enabled: false\n        }\n      },\n      legend: {\n        itemStyle: {\n          color: '#525252',\n          //fontWeight: 'bold',\n          fontSize: 15\n        }\n      },\n      toolTip: {\n        headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n        pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' + '<td style=\"padding:0\"><b>{point.y:.1f} %</b></td></tr>',\n        footerFormat: '</table>',\n        shared: true,\n        useHTML: true\n      },\n      plotOptions: {\n        series: {\n          pointWidth: 20\n        },\n        column: {\n          pointPadding: 0.2,\n          borderWidth: 0\n        }\n      },\n      series: []\n    };\n\n    for (var i = 0; i < 3; i++) {\n      this.state.columnChart.series.push({\n        name: '',\n        data: []\n      });\n    }\n\n    Object.keys(this.state.gradData).map((i, index) => {\n      let rate = this.state.gradData[i].rate;\n      let percentages = this.state.gradData[i].percentages;\n\n      switch (rate) {\n        case 'Graduation Rates':\n          this.state.columnChart.series[0].name = rate;\n          this.state.columnChart.series[0].data.push(percentages);\n          break;\n\n        case '% of Graduates Meeting CSU/UC Requirements':\n          this.state.columnChart.series[1].name = rate;\n          this.state.columnChart.series[1].data.push(percentages);\n          break;\n\n        case 'Dropout Rates':\n          this.state.columnChart.series[2].name = rate;\n          this.state.columnChart.series[2].data.push(percentages);\n          break;\n      }\n    });\n  }\n\n  renderCombinationChart() {\n    this.state.combinationChart = {\n      title: {\n        text: \"Total Science & Engineering Degrees Conferred\",\n        fontFamily: \"Verdana\",\n        fontColor: \"#365253\",\n        fontWeight: 'bold',\n        fontSize: 25\n      },\n      axisX: {\n        valueFormatString: \"'YY\",\n        crosshair: {\n          enabled: true,\n          snapToDataPoint: true\n        }\n      },\n      axisY: {\n        //title: \"Number of People\",\n        gridThickness: 0.5,\n        crosshair: {\n          enabled: true,\n          snapToDataPoint: true\n        }\n      },\n      // axisY1:{\n      // title: \" Axis Y 2 Title\",\n      // },\n      toolTip: {\n        shared: true\n      },\n      legend: {\n        cursor: \"pointer\",\n        verticalAlign: \"bottom\",\n        horizontalAlign: \"center\",\n        dockInsidePlotArea: false,\n        fontWeight: 'bolder',\n        fontSize: 17\n      },\n      data: [{\n        type: \"column\",\n        axisYType: \"primary\",\n        name: \"Total S&E Degrees Conferred in Silicon Valley\",\n        showInLegend: true,\n        markerSize: 0,\n        color: \"#365253\",\n        //lineThickness:2,\n        dataPoints: []\n      }, {\n        type: \"spline\",\n        axisYType: \"secondary\",\n        name: \"Silicon Valley Share of Total S&E Degrees Conferred in US(%)\",\n        toolTipContent: \"{name}:{y}%\",\n        color: \"#a7ce9f\",\n        markerType: \"circle\",\n        markerColor: \"#a7ce9f\",\n        markerBorderColor: \"#365253\",\n        markerBorderThickness: 2,\n        showInLegend: true,\n        markerSize: 10,\n        lineThickness: 4,\n        dataPoints: []\n      }]\n    };\n    return Object.keys(this.state.degreeData).map((i, index) => {\n      let years = this.state.degreeData[i].years;\n      let Silnumbers = this.state.degreeData[i].Silnumbers;\n      let Uspercent = this.state.degreeData[i].Uspercent;\n      this.state.combinationChart.data[0].dataPoints.push({\n        label: years,\n        y: Silnumbers\n      });\n      this.state.combinationChart.data[1].dataPoints.push({\n        label: years,\n        y: Uspercent\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        paddingBottom: '30px',\n        paddingTop: '10px',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 3\n      }\n    }, \"Silicon Valley - Education!\")), /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 21\n      }\n    }, this.renderBarChart(), /*#__PURE__*/React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: this.state.barChart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 21\n      }\n    }, this.renderColumnChart(), /*#__PURE__*/React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: this.state.columnChart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 26\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      xs: 12,\n      style: {\n        paddingTop: '50px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 21\n      }\n    }, this.renderCombinationChart(), /*#__PURE__*/React.createElement(CanvasJSChart, {\n      options: this.state.combinationChart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 25\n      }\n    })))));\n  }\n\n}\n\nexport default Charts;","map":{"version":3,"sources":["/Users/poker/Desktop/Job-Tracking-Web-Application/final-project/client/src/components/Education/Charts.js"],"names":["React","Component","Container","Row","Col","axios","Highcharts","HighchartsReact","CanvasJSReact","Jumbotron","MDBContainer","CanvasJSChart","setOptions","colors","Charts","constructor","props","state","levelData","gradData","degreeData","barChart","columnChart","combinationChart","componentDidMount","get","then","res","document","body","style","overflow","data","setState","level","grad","degree","catch","err","console","log","renderBarChart","chart","type","title","text","color","fontFamily","fontColor","fontWeight","fontSize","accessibility","announceNewData","enabled","point","valueSuffix","xAxis","visible","yAxis","labels","formatter","value","legend","itemStyle","plotOptions","series","pointWidth","dataLabels","format","tooltip","headerFormat","pointFormat","i","push","name","Object","keys","map","index","percentage","renderColumnChart","align","categories","crosshair","opposite","min","toolTip","footerFormat","shared","useHTML","column","pointPadding","borderWidth","rate","percentages","renderCombinationChart","axisX","valueFormatString","snapToDataPoint","axisY","gridThickness","cursor","verticalAlign","horizontalAlign","dockInsidePlotArea","axisYType","showInLegend","markerSize","dataPoints","toolTipContent","markerType","markerColor","markerBorderColor","markerBorderThickness","lineThickness","years","Silnumbers","Uspercent","label","y","render","display","paddingBottom","paddingTop","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport axios from 'axios';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport CanvasJSReact from '../../assets/canvasjs.react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport { MDBContainer } from 'mdbreact';\n//disableScroll.on(); \n\n\n\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nHighcharts.setOptions({\n    colors: [\"#365253\", \"#618685\",\"#5e9a78\",\"#85a47f\",\"#a7ce9f\"]\n});\n\nclass Charts extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            levelData: [],\n            gradData:[],\n            degreeData:[],\n            barChart: {},\n            columnChart: {},\n            combinationChart: {}\n        };\n    }\n\n    componentDidMount() {\n        axios\n            .get('/dashboard/education')\n            .then((res) => {\n                 document.body.style.overflow = 'hidden';\n                let data = res.data;\n                this.setState({ levelData: data.level });\n                this.setState({ gradData: data.grad });\n                this.setState({ degreeData: data.degree });\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n    renderBarChart() {\n    \n        this.state.barChart = {\n            chart: {\n                type: 'bar'\n            },\n            title: {\n               text: \"Percentage of Adults by Educational Attainment in 2018\",\n                    style: {\n            color: \"#365253\",\n                    fontFamily: \"Verdana\",\n                    fontColor: \"#365253\",\n                    fontWeight:'bold',\n                    fontSize:23\n                }\n            },\n            accessibility: {\n                announceNewData: {\n                    enabled: true\n                },\n                point: {\n                    valueSuffix: '%'\n                }\n            },\n             xAxis:{\n                visible:false\n            },\n            yAxis:{\n                labels: {\n                            formatter: function() {\n                             return this.value+\"%\";\n                                                 },\n                        style: {\n                                    fontSize: '15px'\n                            }\n                            },\n                            title: {\n            enabled: false\n        }\n                // title:{\n                //     text:\"Percentage\",\n                //     style:{\n                //             fontSize:17,\n                //             color:\"#000000\",\n                //             fontFamily: \"Verdana\"\n                //         },\n                //},\n                //visible:true,\n                //max:30\n            },\n            legend: {\n                itemStyle: {\n            color: '#525252',\n            //fontWeight: 'bold',\n            fontSize:13\n        }\n        },\n            plotOptions: {\n                \n                series: {\n                    pointWidth: 30,\n                    dataLabels: {\n                        enabled: true,\n                        format: '{point.name}: {point.y:.1f}%'\n                    }\n                }\n            },\n            tooltip: {\n                headerFormat: '<span style=\"font-size:11px\">{series.name}</span><br>',\n                pointFormat: '<span style=\"color:{point.color}\">{point.name}</span>: <b>{point.y:.2f}%</b> of total<br/>'\n            },\n            series: [\n            ]\n        }\n       for (var i = 0; i < 5; i++) {\n            this.state.barChart.series.push({ name: '', data: [] });\n        }\n\n        Object.keys(this.state.levelData).map((i, index) => {\n            let level = this.state.levelData[i].level;\n            let percentage = this.state.levelData[i].percentage;\n            switch (level) {\n                case 'Bachelors Degree':\n                    this.state.barChart.series[0].name = level;\n                    this.state.barChart.series[0].data.push(percentage);\n                    break;\n                case 'Graduate Degree':\n                    this.state.barChart.series[1].name = level;\n                    this.state.barChart.series[1].data.push(percentage);\n                    break;\n                case 'College/Associate Degree':\n                    this.state.barChart.series[2].name = level;\n                    this.state.barChart.series[2].data.push(percentage);\n                    break;\n                case 'High School':\n                    this.state.barChart.series[3].name = level;\n                    this.state.barChart.series[3].data.push(percentage);\n                    break;\n                case 'Less Than HighSchool':\n                    this.state.barChart.series[4].name = level;\n                    this.state.barChart.series[4].data.push(percentage);\n                    break;\n            }\n        });\n    }\n\n    renderColumnChart() {\n        //var colors = ['#3B97B2', '#67BC42', '#FF56DE', '#E6D605', '#BC36FE', '#000'];\n        this.state.columnChart = {\n                chart:{\n                    type:'column'\n                },\n                title: {\n                    text: \"Rate of Graduation, Share of Graduates Who Meet UC/CSU Requirements, and Dropout Rate\",\n                    style: {\n            color: \"#365253\",\n                    fontFamily: \"Verdana\",\n                    fontColor: \"#365253\",\n                    fontWeight:'bold',\n                    fontSize:23\n                }\n                },\n                //dataPointWidth: 50,\n                xAxis: {\n                    labels:{\n                        align: 'right',\n                        style: {\n                                    fontSize: '15px',\n\n                            }\n\n                    },\n                    categories:[\n                    '2013',\n                    '2016',\n                    '2019'\n                    ],\n                    crosshair: true\n                },\n                yAxis: {\n                    opposite:false,\n                    labels: {\n                            formatter: function() {\n                             return this.value+\"%\";\n                                                 },\n                            style: {\n                                    fontSize: '15px'\n                            }\n                        },\n                    min:0,\n                    title: {\n                        enabled:false\n\n                        }\n                  \n                \n                },\n                legend: {\n                itemStyle: {\n            color: '#525252',\n            //fontWeight: 'bold',\n            fontSize:15\n        }\n    },\n                toolTip: {\n                    headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n                pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n                    '<td style=\"padding:0\"><b>{point.y:.1f} %</b></td></tr>',\n                footerFormat: '</table>',\n                shared: true,\n                useHTML: true\n\n                },\n        \n                plotOptions:{\n                    series: {\n                    pointWidth: 20},\n                column: {\n                    pointPadding: 0.2,\n                    borderWidth: 0,\n                    }\n                },\n                \n                series:[]\n            }\n    \nfor (var i = 0; i < 3; i++) {\n            this.state.columnChart.series.push({ name: '', data: [] });\n        }\n\n        Object.keys(this.state.gradData).map((i, index) => {\n            let rate = this.state.gradData[i].rate;\n            let percentages = this.state.gradData[i].percentages;\n            switch (rate) {\n                case 'Graduation Rates':\n                    this.state.columnChart.series[0].name = rate;\n                    this.state.columnChart.series[0].data.push(percentages);\n                    break;\n                case '% of Graduates Meeting CSU/UC Requirements':\n                    this.state.columnChart.series[1].name = rate;\n                    this.state.columnChart.series[1].data.push(percentages);\n                    break;\n                case 'Dropout Rates':\n                    this.state.columnChart.series[2].name = rate;\n                    this.state.columnChart.series[2].data.push(percentages);\n                    break;\n            }\n        });\n    }\n\n\n    renderCombinationChart() {\n    \n        this.state.combinationChart = {\n            \n                title: {\n                    text: \"Total Science & Engineering Degrees Conferred\",\n                    fontFamily: \"Verdana\",\n                    fontColor: \"#365253\",\n                    fontWeight:'bold',\n                    fontSize:25\n                },\n                axisX: {\n                    valueFormatString: \"'YY\",\n                    crosshair: {\n                        enabled: true,\n                        snapToDataPoint: true\n                    }\n                },\n                axisY: \n                \n                    {\n                    //title: \"Number of People\",\n\n                    gridThickness:0.5,\n                    crosshair: {\n                        enabled: true,\n                        snapToDataPoint: true\n                        },\n                    },\n\n                    // axisY1:{\n                    // title: \" Axis Y 2 Title\",\n                    // },\n                \n                toolTip: {\n                    shared: true,\n                },\n                legend: {\n                    cursor: \"pointer\",\n                    verticalAlign: \"bottom\",\n                    horizontalAlign: \"center\",\n                    dockInsidePlotArea: false,\n                    fontWeight:'bolder',\n                    fontSize:17\n                },\n                data: [\n                {\n                    type: \"column\",\n                    axisYType: \"primary\",\n                    name: \"Total S&E Degrees Conferred in Silicon Valley\",\n                    showInLegend: true,\n                    markerSize: 0,\n                    color:\"#365253\",\n\n                    //lineThickness:2,\n                    dataPoints: []\n                },\n                {\n                    type: \"spline\",\n                    axisYType: \"secondary\",\n                    name: \"Silicon Valley Share of Total S&E Degrees Conferred in US(%)\",\n                    toolTipContent: \"{name}:{y}%\",\n                    color:\"#a7ce9f\",\n                    markerType: \"circle\",\n                    markerColor:\"#a7ce9f\",\n                    markerBorderColor:\"#365253\",\n                    markerBorderThickness: 2,\n                    showInLegend: true,\n                    markerSize: 10,\n                    lineThickness:4,\n                    dataPoints: []\n                }\n                ]\n            };\n        return Object.keys(this.state.degreeData).map((i, index) => {\n            let years = this.state.degreeData[i].years;\n            let Silnumbers = this.state.degreeData[i].Silnumbers;\n            let Uspercent = this.state.degreeData[i].Uspercent;\n            this.state.combinationChart.data[0].dataPoints.push({ label: years, y: Silnumbers});\n            this.state.combinationChart.data[1].dataPoints.push({ label: years, y: Uspercent });\n        });\n    };\n\n    \n\n    render() {\n\n\n        return (\n\n            <Container fluid>\n            <div style ={{display: 'flex',paddingBottom: '30px',paddingTop: '10px', justifyContent: 'center',alignItems:'center'}}>\n  <h1>Silicon Valley - Education!</h1>\n</div>\n\n\n            <Container>\n            \n\n                {/* Columns are always 50% wide, on mobile and desktop */}\n                <Row>\n                    <Col xs={6}>\n                        {this.renderBarChart()}\n                        <HighchartsReact\n                            highcharts={Highcharts}\n                            options={this.state.barChart} \n                    />\n                    </Col>\n                    <Col xs={6}  >\n                         {this.renderColumnChart()}\n                         <HighchartsReact\n                            highcharts={Highcharts}\n                            options={this.state.columnChart} \n                     />\n                     </Col>\n                    <Col xs={12}style ={{paddingTop: '50px'}} >\n                        {this.renderCombinationChart()}\n                        <CanvasJSChart options={this.state.combinationChart} \n                    />\n                    </Col>\n                    \n                </Row>\n            </Container>\n            </Container>\n        );\n    }\n}\n\nexport default Charts;\n"]},"metadata":{},"sourceType":"module"}